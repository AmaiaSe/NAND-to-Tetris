// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
    Not16(in=x, out=Notx);
    Not16(in=y, out=Noty);

    Mux4Way16(a=x, b=Notx, c=false, d=true, sel[1]=zx,sel[0]=nx, out=OutX);
    Mux4Way16(a=y, b=Noty, c=false, d=true, sel[1]=zy,sel[0]=ny, out=OutY);

    And16(a=OutX, b=OutY, out=XAndY);
    Not16(in=XAndY, out=NotXAndY);
    Add16(a=OutX, b=OutY, out=XOrY);
    Not16(in=XOrY, out=NotXOrY);

    Mux4Way16(a=XAndY, b=NotXAndY, c=XOrY, d=NotXOrY, sel[1]=f,sel[0]=no, out[0..7]=preOut1, out[8..14]=preOut2,out[15]=preOut3);
    Not16(in[0..7]=preOut1,in[8..14]=preOut2,in[15]=preOut3, out=preOut11);
    Not16(in=preOut11, out=out);

    Or8Way(in=preOut1, out=outOr1);
    Or8Way(in[0..6]=preOut2,in[7]=preOut3, out=outOr2);
    Or(a=outOr1, b=outOr2, out=outZR);
    Mux(a=true, b=false, sel=outZR, out=zr);

    Mux(a=false, b=true, sel=preOut3, out=ng);
}