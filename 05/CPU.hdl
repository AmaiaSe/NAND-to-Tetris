// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    //A-instruction -> 0 = instruction[15] = @num  ¿
    //C-instruction -> 1 = instruction[15] = D=... ¿

    //Diferenciar A de C:
    Mux16(a=false, b=instruction, sel=instruction[15], 
        out[0]=j3,
        out[1]=j2,
        out[2]=j1,
        out[3]=instr3,
        out[4]=instr4,
        out[5]=instr5,
        out[6]=instr6,
        out[7]=instr7,
        out[8]=instr8,
        out[9]=instr9,
        out[10]=instr10,
        out[11]=instr11,
        out[12]=instr12,
        out[13]=instr13,
        out[14]=instr14,
        out[15]=instr15
    );

    Mux16(a=instruction, b=outALU, sel=instruction[15], out=outMux1);
    //si es A-instruction siempre llenamos AReg, sino depende de [5]
    Mux(a=true, b=instruction[5], sel=instruction[15], out=loadA);
    ARegister(in=outMux1, load=loadA, out=outA, out[0..14]=addressM);

    Mux16(a=outA, b=inM, sel=instr12, out=outMux2); //instr[12]
    DRegister(in=outALU, load=instr4, out=outD);
    ALU(
        x=outD, y=outMux2, 
        zx=instr11, 
        nx=instr10, 
        zy=instr9, 
        ny=instr8, 
        f=instr7, 
        no=instr6, 
        out=outALU, out=outM,
        zr=zr, ng=ng
    );

    //Porque si no es C-instruction no tengo que writear?
    And(a=instruction[3], b=instruction[15], out=writeM); 

    Not(in=zr, out=Nzr); //Not 0
    Not(in=ng, out=ps);  //Positivo

    And(a=ps, b=Nzr, out=psANDNzr); // >0
    Or(a=ps, b=zr, out=psORzr);     // >=0
    And(a=ng, b=Nzr, out=ngANDNzr); // <0
    Or(a=ng, b=zr, out=ngORzr);     // <=0

    Mux8Way(
        a=false,
        b=psANDNzr, 
        c=zr, 
        d=psORzr, 
        e=ngANDNzr, 
        f=Nzr, 
        g=ngORzr, 
        h=true, 
        sel[0]=j3, sel[1]=j2, sel[2]=j1, out=loadPC
    );

    Not(in=loadPC, out=incPC);

    PC(in=outA, load=loadPC, inc=incPC, reset=reset, out[0..14]=pc);
}